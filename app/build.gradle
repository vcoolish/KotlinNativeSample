apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.vcoolish.calculator"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    packagingOptions {
        exclude 'META-INF/*.kotlin_module'
    }
}

apply plugin: 'konan'

konan.targets += ['android_arm32', 'android_arm64', 'ios_arm64', "ios_x64"]

konanArtifacts {
    library('app') {
        srcDir 'src/main/kotlin'
        srcDir 'src/commonMain'

        target('ios_x64') {
            srcDir '../iosApp/src/main/kotlin/com/vcoolish'
        }

        target('ios_arm64') {
            srcDir '../iosApp/src/main/kotlin/com/vcoolish'
        }

        target('android_arm32') {
            srcDir "src/main"
        }

        target('android_arm64') {
            srcDir "src/main"
        }
    }

    library('common') {
        artifactName 'common'
        srcDir 'src/commonMain'
    }
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')

        fromPreset(presets['iosX64'], 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }
    sourceSets {
        configure([androidMain]) {
            dependsOn commonMain
        }
        configure([iosMain]) {
            dependsOn commonMain
        }
        configure([ios64Main]) {
            dependsOn iosMain
        }
    }
}

dependencies {
    commonMainImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
    commonMainImplementation "org.kodein.di:kodein-di-erased:$kodein_version"

    androidMainImplementation fileTree(dir: 'libs', include: ['*.jar'])
    androidMainImplementation 'com.android.support:appcompat-v7:28.0.0'
    androidMainImplementation 'com.android.support.constraint:constraint-layout:1.1.3'
    androidMainImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    androidMainImplementation "io.ktor:ktor-client-android:$ktor_version"
    androidMainImplementation 'com.hypertrack:hyperlog:0.0.10'

    iosMainImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
    iosMainImplementation "io.ktor:ktor-client-ios:$ktor_version"
    iosMainImplementation "io.ktor:ktor-client-json-native:$ktor_version"
    iosMainImplementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"

    commonTestImplementation 'org.jetbrains.kotlin:kotlin-test'
    commonTestImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    def target = project.findProperty("kotlin.target") ?: "ios"
    dependsOn "link${buildType.toLowerCase().capitalize()}Framework${target.capitalize()}"

    doLast {
        def srcFile = kotlin.targets."$target".compilations.main.getBinary("FRAMEWORK", buildType)
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}

// Special Gradle task that is called from Xcode.
// Two Gradle properties must be specified for this task:
// - uikit.configuration.name=[Release|Debug]
// - uikit.binary.location
task buildAppForXcode {
    if (isCalledFromXcode()) {
        dependsOn kotlin.targets.ios.binaries.getExecutable(getBuildTypeForXcode()).linkTask
    }

    doLast {
        if (!isCalledFromXcode()) {
            throw new Exception("Please run 'buildAppForXcode' task with all necessary properties!")
        }

        copy {
            from file(kotlin.targets.ios.binaries.getExecutable(getBuildTypeForXcode()).outputFile)
            into file(getBinaryLocationForXcode().parentFile)
            rename {
                getBinaryLocationForXcode().name
            }
        }
    }
}

private boolean isCalledFromXcode() {
    project.hasProperty('iosApp.configuration.name') && project.hasProperty('iosApp.binary.location')
}

private String getBuildTypeForXcode() {
    project.properties['iosApp.configuration.name'] as String
}

private File getBinaryLocationForXcode() {
    file(project.properties['iosApp.binary.location'])
}